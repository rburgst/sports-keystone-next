# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Mutation {
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createClub(data: ClubCreateInput!): Club
  createClubs(data: [ClubCreateInput!]!): [Club]
  updateClub(where: ClubWhereUniqueInput!, data: ClubUpdateInput!): Club
  updateClubs(data: [ClubUpdateArgs!]!): [Club]
  deleteClub(where: ClubWhereUniqueInput!): Club
  deleteClubs(where: [ClubWhereUniqueInput!]!): [Club]
  createAthlete(data: AthleteCreateInput!): Athlete
  createAthletes(data: [AthleteCreateInput!]!): [Athlete]
  updateAthlete(
    where: AthleteWhereUniqueInput!
    data: AthleteUpdateInput!
  ): Athlete
  updateAthletes(data: [AthleteUpdateArgs!]!): [Athlete]
  deleteAthlete(where: AthleteWhereUniqueInput!): Athlete
  deleteAthletes(where: [AthleteWhereUniqueInput!]!): [Athlete]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  club: Club
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: RoleWhereInput
  club: ClubWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  club: ClubRelateToOneForUpdateInput
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input ClubRelateToOneForUpdateInput {
  create: ClubCreateInput
  connect: ClubWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  club: ClubRelateToOneForCreateInput
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input ClubRelateToOneForCreateInput {
  create: ClubCreateInput
  connect: ClubWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canManageClubs: Boolean
  canManageUsers: Boolean
  canReadAllAthletes: Boolean
  canWriteAllAthletes: Boolean
  canReadOwnClubAthletes: Boolean
  canWriteOwnClubAthletes: Boolean
  canEnterScores: Boolean
  canEnterScoresWhenDone: Boolean
  canManageContent: Boolean
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageClubs: BooleanFilter
  canManageUsers: BooleanFilter
  canReadAllAthletes: BooleanFilter
  canWriteAllAthletes: BooleanFilter
  canReadOwnClubAthletes: BooleanFilter
  canWriteOwnClubAthletes: BooleanFilter
  canEnterScores: BooleanFilter
  canEnterScoresWhenDone: BooleanFilter
  canManageContent: BooleanFilter
  users: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageClubs: OrderDirection
  canManageUsers: OrderDirection
  canReadAllAthletes: OrderDirection
  canWriteAllAthletes: OrderDirection
  canReadOwnClubAthletes: OrderDirection
  canWriteOwnClubAthletes: OrderDirection
  canEnterScores: OrderDirection
  canEnterScoresWhenDone: OrderDirection
  canManageContent: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageClubs: Boolean
  canManageUsers: Boolean
  canReadAllAthletes: Boolean
  canWriteAllAthletes: Boolean
  canReadOwnClubAthletes: Boolean
  canWriteOwnClubAthletes: Boolean
  canEnterScores: Boolean
  canEnterScoresWhenDone: Boolean
  canManageContent: Boolean
  users: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageClubs: Boolean
  canManageUsers: Boolean
  canReadAllAthletes: Boolean
  canWriteAllAthletes: Boolean
  canReadOwnClubAthletes: Boolean
  canWriteOwnClubAthletes: Boolean
  canEnterScores: Boolean
  canEnterScoresWhenDone: Boolean
  canManageContent: Boolean
  users: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Club {
  id: ID!
  clubName: String
  clubNumber: Int
  contactEmail: String
  addressName: String
  street: String
  zip: String
  city: String
  country: String
  external: Boolean
  managerUser: User
  athletes(
    where: AthleteWhereInput! = {}
    orderBy: [AthleteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Athlete!]
  athletesCount(where: AthleteWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  teamsCount(where: TeamWhereInput! = {}): Int
}

input ClubWhereUniqueInput {
  id: ID
  clubNumber: Int
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  NOT: [ClubWhereInput!]
  id: IDFilter
  clubName: StringFilter
  clubNumber: IntNullableFilter
  contactEmail: StringFilter
  addressName: StringFilter
  street: StringFilter
  zip: StringFilter
  city: StringFilter
  country: StringNullableFilter
  external: BooleanFilter
  managerUser: UserWhereInput
  athletes: AthleteManyRelationFilter
  teams: TeamManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input AthleteManyRelationFilter {
  every: AthleteWhereInput
  some: AthleteWhereInput
  none: AthleteWhereInput
}

input TeamManyRelationFilter {
  every: TeamWhereInput
  some: TeamWhereInput
  none: TeamWhereInput
}

input ClubOrderByInput {
  id: OrderDirection
  clubName: OrderDirection
  clubNumber: OrderDirection
  contactEmail: OrderDirection
  addressName: OrderDirection
  street: OrderDirection
  zip: OrderDirection
  city: OrderDirection
  country: OrderDirection
  external: OrderDirection
}

input ClubUpdateInput {
  clubName: String
  clubNumber: Int
  contactEmail: String
  addressName: String
  street: String
  zip: String
  city: String
  country: String
  external: Boolean
  managerUser: UserRelateToOneForUpdateInput
  athletes: AthleteRelateToManyForUpdateInput
  teams: TeamRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AthleteRelateToManyForUpdateInput {
  disconnect: [AthleteWhereUniqueInput!]
  set: [AthleteWhereUniqueInput!]
  create: [AthleteCreateInput!]
  connect: [AthleteWhereUniqueInput!]
}

input TeamRelateToManyForUpdateInput {
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input ClubUpdateArgs {
  where: ClubWhereUniqueInput!
  data: ClubUpdateInput!
}

input ClubCreateInput {
  clubName: String
  clubNumber: Int
  contactEmail: String
  addressName: String
  street: String
  zip: String
  city: String
  country: String
  external: Boolean
  managerUser: UserRelateToOneForCreateInput
  athletes: AthleteRelateToManyForCreateInput
  teams: TeamRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input AthleteRelateToManyForCreateInput {
  create: [AthleteCreateInput!]
  connect: [AthleteWhereUniqueInput!]
}

input TeamRelateToManyForCreateInput {
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

type Athlete {
  id: ID!
  firstName: String
  lastName: String
  birthYear: Int
  gender: String
  disabled: Boolean
  club: Club
  team: Team
  version: Int
  createdBy: String
  lastModifiedBy: String
  createdDate: DateTime
  lastModifiedDate: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AthleteWhereUniqueInput {
  id: ID
}

input AthleteWhereInput {
  AND: [AthleteWhereInput!]
  OR: [AthleteWhereInput!]
  NOT: [AthleteWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  birthYear: IntFilter
  gender: StringNullableFilter
  disabled: BooleanFilter
  club: ClubWhereInput
  team: TeamWhereInput
  version: IntFilter
  createdBy: StringFilter
  lastModifiedBy: StringFilter
  createdDate: DateTimeNullableFilter
  lastModifiedDate: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AthleteOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  birthYear: OrderDirection
  gender: OrderDirection
  disabled: OrderDirection
  version: OrderDirection
  createdBy: OrderDirection
  lastModifiedBy: OrderDirection
  createdDate: OrderDirection
  lastModifiedDate: OrderDirection
}

input AthleteUpdateInput {
  firstName: String
  lastName: String
  birthYear: Int
  gender: String
  disabled: Boolean
  club: ClubRelateToOneForUpdateInput
  team: TeamRelateToOneForUpdateInput
  version: Int
  createdBy: String
  lastModifiedBy: String
  createdDate: DateTime
  lastModifiedDate: DateTime
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input AthleteUpdateArgs {
  where: AthleteWhereUniqueInput!
  data: AthleteUpdateInput!
}

input AthleteCreateInput {
  firstName: String
  lastName: String
  birthYear: Int
  gender: String
  disabled: Boolean
  club: ClubRelateToOneForCreateInput
  team: TeamRelateToOneForCreateInput
  version: Int
  createdBy: String
  lastModifiedBy: String
  createdDate: DateTime
  lastModifiedDate: DateTime
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

type Team {
  id: ID!
  teamName: String
  teamType: String
  club: Club
  athletes(
    where: AthleteWhereInput! = {}
    orderBy: [AthleteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Athlete!]
  athletesCount(where: AthleteWhereInput! = {}): Int
}

input TeamWhereUniqueInput {
  id: ID
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  teamName: StringFilter
  teamType: StringFilter
  club: ClubWhereInput
  athletes: AthleteManyRelationFilter
}

input TeamOrderByInput {
  id: OrderDirection
  teamName: OrderDirection
  teamType: OrderDirection
}

input TeamUpdateInput {
  teamName: String
  teamType: String
  club: ClubRelateToOneForUpdateInput
  athletes: AthleteRelateToManyForUpdateInput
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  teamName: String
  teamType: String
  club: ClubRelateToOneForCreateInput
  athletes: AthleteRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  clubs(
    where: ClubWhereInput! = {}
    orderBy: [ClubOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Club!]
  club(where: ClubWhereUniqueInput!): Club
  clubsCount(where: ClubWhereInput! = {}): Int
  athletes(
    where: AthleteWhereInput! = {}
    orderBy: [AthleteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Athlete!]
  athlete(where: AthleteWhereUniqueInput!): Athlete
  athletesCount(where: AthleteWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
